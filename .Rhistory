#FASE 6: Statistica descrittiva bivariata
# Calcolo della covarianza tra variabili
for (feature in top_features) {
if (feature != "URLSimilarityIndex") {
# Covarianza tra la variabile continua e la binaria
cov_bin_cont <- cov(phishing_data$URLSimilarityIndex, phishing_data[[feature]])
cat("\nCovarianza tra", feature, " e URLSimilarityIndex:", round(cov_bin_cont, 4), "\n")
# Covarianza tra due variabili binarie
for (feature2 in top_features) {
if (feature != feature2) {
cov_bin_bin <- cov(phishing_data[[feature]], phishing_data[[feature2]])
cat("Covarianza tra", feature, "e", feature2, ":", round(cov_bin_bin, 4), "\n")
}
}
}
}
# INSTALLAZIONE PACCHETTI
packages <- c("corrplot", "tidyverse", "ggplot2", "DataExplorer", "e1071")
install.packages(setdiff(packages, rownames(installed.packages())))
# Caricamento delle librerie
library(tidyverse)  # Per manipolazione e visualizzazione dei dati
library(corrplot)   # Per la visualizzazione delle correlazioni
library(ggplot2)    # Per la creazione di grafici
library(DataExplorer)  # Per report automatici sull'EDA
library(e1071)
library(reshape2)
#ANALISI DESCRITTIVA DEL DATASET
#FASE 1: In questa fase il Dataset viene caricato e viene mostrato se sono presenti valori mancanti
# Caricamento del dataset
phishing_data <- read.csv("Phishing_URL_Dataset_2.csv", sep = ";")
# Visualizzare le prime righe del dataset
head(phishing_data)
# Verifica della struttura del dataset
str(phishing_data)
# Controllo dei valori mancanti
colSums(is.na(phishing_data))
#FASE 6: Statistica descrittiva bivariata
# Calcolo della covarianza tra variabili
for (feature in top_features) {
if (feature != "URLSimilarityIndex") {
# Covarianza tra la variabile continua e la binaria
cov_bin_cont <- cov(phishing_data$URLSimilarityIndex, phishing_data[[feature]])
cat("\nCovarianza tra", feature, " e URLSimilarityIndex:", round(cov_bin_cont, 4), "\n")
# Covarianza tra due variabili binarie
for (feature2 in top_features) {
if (feature != feature2) {
cov_bin_bin <- cov(phishing_data[[feature]], phishing_data[[feature2]])
cat("Covarianza tra", feature, "e", feature2, ":", round(cov_bin_bin, 4), "\n")
}
}
}
}
# FASE 2: vengono analizzate le feature che hanno un valore predittivo maggiore
# Codifica numerica delle colonne 'Domain' e 'Title'  per la creazione della matrice di correlazione
phishing_data$Domain_numeric <- as.numeric(factor(phishing_data$Domain))
phishing_data$Title_numeric <- as.numeric(factor(phishing_data$Title))
# CORRELAZIONE TRA TUTTE LE FEATURE E LA VARIABILE TARGET
# Esclusione delle variabili non numeriche
numeric_data <- phishing_data[sapply(phishing_data, is.numeric)]
label_correlation <- correlation_matrix["label", ]
#ANALISI DESCRITTIVA DEL DATASET
#FASE 1: In questa fase il Dataset viene caricato e viene mostrato se sono presenti valori mancanti
# Caricamento del dataset
phishing_data <- read.csv("Phishing_URL_Dataset_2.csv", sep = ";")
# Visualizzare le prime righe del dataset
head(phishing_data)
# Verifica della struttura del dataset
str(phishing_data)
# Controllo dei valori mancanti
colSums(is.na(phishing_data))
# FASE 2: vengono analizzate le feature che hanno un valore predittivo maggiore
# Codifica numerica delle colonne 'Domain' e 'Title'  per la creazione della matrice di correlazione
phishing_data$Domain_numeric <- as.numeric(factor(phishing_data$Domain))
phishing_data$Title_numeric <- as.numeric(factor(phishing_data$Title))
# CORRELAZIONE TRA TUTTE LE FEATURE E LA VARIABILE TARGET
# Esclusione delle variabili non numeriche
numeric_data <- phishing_data[sapply(phishing_data, is.numeric)]
label_correlation <- correlation_matrix["label", ]
# Esegui la selezione delle feature
top_features_data <- phishing_data[, top_features]
# INSTALLAZIONE PACCHETTI
packages <- c("corrplot", "tidyverse", "ggplot2", "DataExplorer", "e1071")
install.packages(setdiff(packages, rownames(installed.packages())))
# Caricamento delle librerie
library(tidyverse)  # Per manipolazione e visualizzazione dei dati
library(corrplot)   # Per la visualizzazione delle correlazioni
library(ggplot2)    # Per la creazione di grafici
library(DataExplorer)  # Per report automatici sull'EDA
library(e1071)
library(reshape2)
# INSTALLAZIONE PACCHETTI
packages <- c("corrplot", "tidyverse", "ggplot2", "DataExplorer", "e1071")
install.packages(setdiff(packages, rownames(installed.packages())))
# Caricamento delle librerie
library(tidyverse)  # Per manipolazione e visualizzazione dei dati
library(corrplot)   # Per la visualizzazione delle correlazioni
library(ggplot2)    # Per la creazione di grafici
library(DataExplorer)  # Per report automatici sull'EDA
library(e1071)
library(reshape2)
# INSTALLAZIONE PACCHETTI
packages <- c("corrplot", "tidyverse", "ggplot2", "DataExplorer", "e1071")
install.packages(setdiff(packages, rownames(installed.packages())))
# Caricamento delle librerie
library(tidyverse)  # Per manipolazione e visualizzazione dei dati
library(corrplot)   # Per la visualizzazione delle correlazioni
library(ggplot2)    # Per la creazione di grafici
library(DataExplorer)  # Per report automatici sull'EDA
library(e1071)
library(reshape2)
#ANALISI DESCRITTIVA DEL DATASET
#FASE 1: In questa fase il Dataset viene caricato e viene mostrato se sono presenti valori mancanti
# Caricamento del dataset
phishing_data <- read.csv("Phishing_URL_Dataset_2.csv", sep = ";")
# Visualizzare le prime righe del dataset
head(phishing_data)
# Verifica della struttura del dataset
str(phishing_data)
# Controllo dei valori mancanti
colSums(is.na(phishing_data))
# FASE 2: vengono analizzate le feature che hanno un valore predittivo maggiore
# Codifica numerica delle colonne 'Domain' e 'Title'  per la creazione della matrice di correlazione
phishing_data$Domain_numeric <- as.numeric(factor(phishing_data$Domain))
phishing_data$Title_numeric <- as.numeric(factor(phishing_data$Title))
# CORRELAZIONE TRA TUTTE LE FEATURE E LA VARIABILE TARGET
# Esclusione delle variabili non numeriche
numeric_data <- phishing_data[sapply(phishing_data, is.numeric)]
label_correlation <- correlation_matrix["label", ]
